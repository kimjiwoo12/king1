로그
  7단계로 구성 -> 5단계만 사용
  1. OFF : 로그를 찍지 않는다.
  2. DEBUG : 개발 시에만 로그를 찍겠다.
  3. INFO : 정보로서 확인이 필요한 데이터만 찍겠다.
  4. WARN : 경고를 찍겠다.
  5. ERROR : 에러를 찍겠다.
  6. FATAL : 심각한 에러를 찍겠다.
  7. ALL : 항상 로그를 찍는다.
  
  개발자가 로그 레벨을 설정하여 Consol에 필요한 정보만 출력하도록 할 수 있다.
  xml(설정 파일, logback.xml)에 level 속성으로 변경할 수 있다.
  예를 들어 level 속성을 warn으로 설정하면 debug, info는 출력하지 않는다.
  개발시는 debug로, 실서버에서 실행 시에는 error로 설정한다.
  
  
비밀번호 암호화
  Spring Security(보안 모듈 라이브러리)
  
  암호화 메소드
  	BCryptPasswordEncoder 클래스의 encode() 메소드로 암호화
  	
  복호화는 제공하지 않음. 대신 평문 비밀번호와 암호문을 비교하여
  맞는지 틀린지를 알려주는 matches() 메소드를 제공.
  
  암호화(Encryption)
  	평문(Plane text) -> 암호문(Cipher text)
  복호화(Decryption)
  	암호문 -> 평문
  	
Maven Repository에서 Security로 검색
	Spring Security Core 선택


paging(페이징 처리)
  전체 출력할 내용이 한 화면에 모두 보여주기 어려운 상황을 해결하기 위한 방법.
  한 화면에 보일 데이터의 개수를 제한하고 여러 화면에 나눠서 보이도록 함.
  
  전체 데이터를 한 화면에 보일 데이터의 수로 분할하여 각 화면 당 번호를 붙이고,
  각 번호에 링크를 연결하는 방식.
  -> <a> 태그를 사용하여 링크로 연결.
  
  페이징 객체는 분할한 데이터에 링크를 연결하는 html 코드를 생성하는 객체.

글 작성 및 파일 업로드
  Multi-part : 한 웹 문서 안에 문자와 바이너리 데이터(이미지, 동영상, 오디오 및
  다양한 형식의 파일)가 같이 포함되어 있는 형태.
  요청(Request) 객체 안에 텍스트와 바이너리 데이터가 함께 처리되는 상황.

  멀티파트 파일 업로드용 라이브러리
  commons-io, commons-fileupload를 pom.xml에 포함.

  MultipartResolver 객체(bean)를 servlet-context.xml에 설정.
    멀티파트로 전송되는 데이터를 해석하여 처리하는 객체.
    설정 내용 - 문자셋(파일이름), 업로드 크기, 업로드 메모리 크기 등.
    
	Resolver란 - 해석기. 요청 내용을 해석하여 그에 대응하는 조치를 취할 수 있도록
			보조하는 객체.
			예) ViewResolver 

SelectKey : 키 값을 구하는 mybatis 구문
  두 테이블이 같은 값(기본키와 외래키 관계)을 공유하고, 거의 동시에 
  데이터를 저장해야 할 때 사용.
  공유하는 값(기본키)을 먼저 생성하고 그 값을 특정 변수(DTO의 필드)에
  저장한 다음 사용하는 형태(MySQL).
  게시판 글번호를 해당 게시글과 함께 저장하는 파일에 같이 사용.
  
  주요 속성
  1) useGeneratedKeys="true" : 부모태그에 작성하는 속성.
  		selectKey를 사용하겠다는 것을 명시.
  2) keyProperty="필드" : dto의 해당 변수명.
  		selectKey의 쿼리문에서 실행한 결과값을 dto 필드(변수)에 저장.
  		부모 태그(insert)와 자식태크(selectKey)가 공유하는 변수.
  		두 태그에 모두 작성.
  3) resultType="필드타입" : selectKey에서 구한 키 값을 타입.
  4) order="AFTER" : 자식태그(selectKey)의 실행 순서.
  		"BEFORE" : 자식 태그가 먼저 실행.
  		"AFTER" : 자식 태그가 나중에 실행.

파일 저장 방식
  1) DB에 대용량의 컬럼으로 함께 저장.(네이버의 스마트에디터 등.. 에디터 api)
     DB 서버에 부담을 줌.
  2) DB에는 파일의 정보만 저장, 파일은 파일 서버에 따로 저장.(이 방식으로 처리)


멀티파트에서 파일 꺼내는 단계
1. 한 문서에는 여러개의 파일태그(input type="file"인..)가 존재 
	-> Iterator와 while 사용
2. 한 파일태그에 여러개의 파일을 포함(multiple 속성)
	-> 파일 목록을 List로 처리, for 사용
3. 각각의 파일로부터 파일의 이름을 가져와서 처리.(+ 파일 전송)


게시글 상세 보기 화면
  게시글 내용보기, 게시글 첨부파일 확인(이미지 미리보기), 댓글 기능,
  게시글 수정, 게시글 삭제 등 처리. 
  
  
Json 보충
  Json Object : 개별 Object
  Json Array : Json Object 배열
  
  예) json object - {name:"홍길동", age:20, addr:"인천시"}
  예) json array - [{name:"홍길동", age:20, addr:"인천시"}, 
  					{name:"고길동", age:25, addr:"부산시"},
  					{name:"나길동", age:30, addr:"서울시"}]
  전송시 json array는 하나의 json object로 처리.
  -> {list: [{name:"홍길동", age:20, addr:"인천시"}, 
  			 {name:"고길동", age:25, addr:"부산시"},
  			 {name:"나길동", age:30, addr:"서울시"}]}
  
파일 다운로드 기능
  response(응답) 객체를 통해 직접 브라우저로 파일을 전송.
  
  
세션 인터셉터(필터링) 처리
  비인증(로그인 없는) 접근 제어
  사용자의 요청을 컨트롤러로 전달되기 전에 가로채서 내용을 확인하고
  정상적인(로그인 후) 상태일 경우에만 컨트롤러로 전달, 비인증인 경우
  처음 페이지(허용된 페이지)로 되돌리는 객체.
  
  단계
  1) 인터셉터 클래스 작성(HandlerInterceptorAdapter)
  2) servlet-context.xml에 관련 설정
  
  
  

  Openai_board 프로젝트 완성
  - 게시글 수정(/updateFrm, /boardUpdate) : 같이 해 봅시다~
    writeFrm으로 만드는 updateFrm.
  
  
  - 게시글 삭제(/delete)
  - 게시글 조회수 수정 ' set b_views = b_views + 1 '
  - 글 작성 시 접속자 m_point 수정 및 세션 수정
  
  
  검색(제목, 내용), 해시태그 만들기(인공지능 API 활용)
  - 목록 화면에 추가

  Mybatis 동적쿼리
  - if
  - choose, when, otherwise
  
  mybatis에서 변수의 값을 출력하는 방법
  1) #{변수명} : 변수의 타입에 따라 '(따옴표)를 붙이거나 안붙이는 형식
  				변수의 타입이 정수(숫자형)일 경우 '를 안붙임.
  				변수의 타입이 문자열일 경우 '를 붙임.
  		예) int num = 100; -> #{num} : 100 으로 출력
  		   String num = "100"; -> #{num} : '100' 으로 출력
  2) ${변수명} : 변수의 타입에 상관 없이 '(따옴표)를 안붙이는 형식
  		예) String str = "abc"; -> ${str} : abc 로 출력
  		조건에 따라서 컬럼 또 테이블명을 쿼리에 입력하는 경우에 사용
  		(동적 쿼리)
  
   
인공지능 오픈 api를 활용한 해시태그 붙이기
  - 글쓰기 시 입력한 내용의 문자열을 인공지능 api를 활용하여 해시태그로 등록.
  - 분석된 내용 중 명사에 해당하는 단어를 해시태그로 등록.
  - 인공지능 api와 연동하는 클래스 작성
  - 오픈 인공지능 사이트에서 분석해 준 내용(명사)을 저장하는 DB 테이블 생성.
  
  발급받은 API 키 : 57d751ca-cfea-483c-bce6-4f75ffa84743

  
에러 페이지 설정(spring mvc project)
  web.xml에 <error-page> 태그로 설정
  설정하는 에러 코드
  404 : page not found(요청 페이지 찾을 수 없음)
  500 : server error(내부 서버 오류)

  위의 코드에 대응하는 jsp 파일을 작성(스타일 처리) > error 폴더에 저장.




  
